@mixin no-scrollbar {
  -ms-overflow-style: none; /* IE and Edge */
  scrollbar-width: none; /* Firefox */

  &::-webkit-scrollbar {
    display: none;
  }
}

@mixin optional-at-root($sel) {
  @at-root #{if(not &, $sel, selector-append(&, $sel))} {
    @content;
  }
}

// Update Placeholder text
@mixin input-placeholder {
  @include optional-at-root('::-webkit-input-placeholder') {
    @content;
  }

  @include optional-at-root(':-moz-placeholder') {
    @content;
  }

  @include optional-at-root('::-moz-placeholder') {
    @content;
  }

  @include optional-at-root(':-ms-input-placeholder') {
    @content;
  }
}

@mixin remove-auto-complete-style {
  &:autofill,
  &:autofill:hover,
  &:autofill:focus,
  /* Change autocomplete styles in WebKit */
  &:-webkit-autofill,
  &:-webkit-autofill:hover,
  &:-webkit-autofill:focus {
    @content; /* should add: -webkit-text-fill-color: <color> */
    border: none;
    -webkit-box-shadow: 0 0 0px 1000px #00000000 inset;
    transition: background-color 5000s ease-in-out 0s;
  }
}

@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}

@mixin psuedo-element-centered($before-after: 'before', $placement: 'top') {
  position: relative;

  &::#{$before-after} {
    content: '';
    position: absolute;
    left: 0;
    #{$placement}: 0;
    width: 100%;
    height: 100%;
    @content;
  }
}

@mixin no-drag-select {
  // Disable all of that dragging nonsense
  user-drag: none;
  -webkit-user-drag: none;
  user-select: none;
  -ms-user-select: none;
  -webkit-touch-callout: none; // iOS Safari
  -webkit-user-select: none; // Safari
  -khtml-user-select: none; // Konqueror HTML
  -moz-user-select: none; // Old versions of Firefox
  -ms-user-select: none; // Internet Explorer/Edge
  user-select: none; // Non-prefixed version, currently
}

@mixin no-scrollbar {
  -ms-overflow-style: none; /* IE and Edge */
  scrollbar-width: none; /* Firefox */

  &::-webkit-scrollbar {
    display: none;
  }
}

@mixin clamp(
  $property,
  $min-size,
  $scaler,
  $max-size,
  $min-size-left: false,
  $scaler-left: false,
  $max-size-left: false
) {
  @if $min-size-left == false {
    #{$property}: $max-size;
    #{$property}: #{'min(max(#{$min-size}, #{$scaler}), #{$max-size})'};
    #{$property}: clamp($min-size, $scaler, $max-size);
  } @else if $min-size-left == 0 or $min-size-left == auto {
    #{$property}: $max-size $min-size-left;
    #{$property}: #{'min(max(#{$min-size}, #{$scaler}), #{$max-size})'}
      $min-size-left;
    #{$property}: clamp($min-size, $scaler, $max-size) $min-size-left;
  } @else {
    #{$property}: $max-size $min-size-left;
    #{$property}: #{'min(max(#{$min-size}, #{$scaler}), #{$max-size})'}
      #{'min(max(#{$min-size-left}, #{$scaler-left}), #{$max-size-left})'};
    #{$property}: clamp($min-size, $scaler, $max-size)
      clamp($min-size-left, $scaler-left, $max-size-left);
  }
}

@mixin optional-at-root($sel) {
  @at-root #{if(not &, $sel, selector-append(&, $sel))} {
    @content;
  }
}

// Update Placeholder text
@mixin input-placeholder {
  @include optional-at-root('::-webkit-input-placeholder') {
    @content;
  }

  @include optional-at-root(':-moz-placeholder') {
    @content;
  }

  @include optional-at-root('::-moz-placeholder') {
    @content;
  }

  @include optional-at-root(':-ms-input-placeholder') {
    @content;
  }
}

@mixin remove-auto-complete-style {
  &:autofill,
  &:autofill:hover,
  &:autofill:focus,
  /* Change autocomplete styles in WebKit */
  &:-webkit-autofill,
  &:-webkit-autofill:hover,
  &:-webkit-autofill:focus {
    @content; /* should add: -webkit-text-fill-color: <color> */
    border: none;
    -webkit-box-shadow: 0 0 0px 1000px #00000000 inset;
    transition: background-color 5000s ease-in-out 0s;
  }
}

@mixin respond-to($breakpoint) {
  @media (min-width: $breakpoint) {
    @content;
  }
}

//  * Generate a css class with responsive classes using key and value from map
//  *
//  * @param {SASS Map} $map: must be a sass map containing key value pairs
//  * @param {text} $class: the css property to effect
//  * @param {text} $property: the css property to effect
//  * @param {boolean} $calc-value: toggle for using calcualted value, must be paired with `$var-name`
//  * @param {CSS var} $var-name: A css var to use for calculating the output value
//  */
@mixin class-with-responsive-key-and-val(
  $map,
  $class,
  $property,
  $calc-value: null,
  $var-name: null
) {
  @each $key, $val in $map {
    .#{$class}-#{$key} {
      @if $calc-value and $var-name {
        #{$property}: calc($val - var($var-name, 0));
      } @else {
        #{$property}: $val;
      }
    }

    @each $bp, $px in $breakpoints {
      @include respond-to(#{$px}) {
        .#{$class}-#{$bp}-#{$key} {
          @if $calc-value and $var-name {
            #{$property}: calc($val - var($var-name, 0)) !important;
          } @else {
            #{$property}: $val !important;
          }
        }
      }
    }
  }
}
